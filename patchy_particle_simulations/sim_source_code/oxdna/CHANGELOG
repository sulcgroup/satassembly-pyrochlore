v 2.3.2
	Bugfixing release:
	- Fixed a bug in SimManager.cpp that would make the ambigous case of equilibration_steps>0
	  and restart_step_counter=false misbehave
	- Removed the inclusion of xlocale.h from defs.h

v 2.3.1
	Bugfixing release:
	- Fixed a bug that would prevent compilation on Apple systems
	- Fixed a bug introduced in the previous version that broke the mindistance order parameter.
	- Fixed a bug in the cadnano_interface.py that prevented the processing of sequence files with 
	  \r\n newline sequences.
	- Added a function to SantaLucia.py that computes the melting temperature of a duplex from given 
	  values of DeltaH, DeltaS, and duplex concentration.
	- Minor clean-up to SantaLucia.py and cullTraj.py.

v 2.3 (revision 6874, February 2018)
	This new version contains a lot of under-the-hood improvements and a few more features. As 
	far as we can tell, the code is fully backward compatible (input-file-wise).
	Here is a condensed list of changes:
	- It is now possible to write interactions that feature three-body contributions. The only 
	perative difference is that each particle now stores a vector of ParticlePair objects which 
	contain all particle pairs that are involved in a bonded interaction with that particle. This 
	vector should be initialised by the Interaction object. Look how it is done in the DNA or RNA 
	interactions.
	- oxDNA now supports non-cubic boxes. Both CPU and CUDA backends have this.
	- The code now has a check that is not producing too much data. The default limit is set to 
	1 MB/s (after a 30-second grace period). This limit can be modified from the input file with the 
	keyword
	max_io = <float> [units of MB/s]
	and can be raised to any number should a user need to do so.
	- There is a new Timings class for more intuitive and usable timings.
	- oxDNA can now simulate the TEP model (see "Models for twistable elastic polymers in Brownian 
	dynamics, and their implementation for LAMMPS.", http://www.ncbi.nlm.nih.gov/pubmed/24712817)
	- Added a "reset_initial_com_momentum" option that, if set to true, will set the momentum of 
	the centre of mass of the initial configuration to 0. A similar key, "reset_com_momentum", will
	do the same every time the diffusion is fixed.
	- Added DOCS/HOWTO_write_interactions.txt, a short guide on how to write new interactions.
	- Added the Bussi-Donadio-Parrinello thermostat (from Bussi et al, J. Chem. Phys. 2007).
	- Checkpoints have been implemented, although not thoroughly tested, so that the code can be 
	restarted and follow the same trajectory. See the Doxygen documentation for SimBackend on how to 
	use them. This cannot work on CUDA due to the operation order not being predictable.
	- Implemented a new test suite. It is lighter and easier to use. Use "make test_run" and "make test_quick"
	to check whether the code runs and gives sensible results in simple cases, respectively.
	- Added the NPT ensemble to Monte Carlo simulations.
	- Added a new Monte Carlo backend that supports custom moves (src/Backends/MCMoves). It is 
	flexible and modular. It supports, rotations, translations, site-rotations, volume and shape
	moves and VMMC.
	- Added a segfault handler that prints out the intercept the SIGSEGV signal and prints out the 
	stacktrace of the program before crashing.
	- Added mismatch_repulsion (0 by default) option to RNA2 interaction. When set to 1 in input file, 
	it introduces repulsion potential between non-complementary bases.
	- Added a new type of wall (LJ_wall). In contrast with repulsion_plane, LJ_wall acts on both sides 
	and its properties can be finely tuned (the diameter, stiffness and steepness can all be chosen, 
	and the user can choose whether the wall should feature an attractive part or not). 
	- confGenerator can now be used to generate DNA and RNA initial configurations. These configurations
	are generated randomly and hence mostly composed of single strands in coil configurations.
	- Added some new relaxation strategies. See the NEW_RELAX_PROCEDURE/README file for details.
	- Added a simple (MC-like) barostat to the MD backends. The barostat_probability key makes it 
	possible to tune the coupling of the MC-like barostat. A value of 1 means that the barostat will be 
	applied every time step.
	- oxDNA can now be compiled with c++11-complaint compilers by setting the CMake CXX11 flag to 1 
	(-DCXX11=1). This might result in small speed-ups.
	- Added the cells_auto_optimisation key (defaults to true). If true, the number of cells (both on 
	CPU and GPU) will not exceed the number of particles, thus avoiding running out of memory when using 
	extremely large boxes. However, doing so might result in a performance hit, which is why the new key 
	was added. Experienced users might want to turn it off to optimise simulations.
	- Lees-Edwards boundary conditions to simulate systems under shear are now enabled for MD simulations
	(on CPU only). Simulating with shear requires the two mandatory keys
	lees_edwards = true
	lees_edwards_shear_rate = <float>
	Only Bussi, Langevin and DPD thermostats should be used to control the temperature of simulations 
	under shear.
	- UTILS/base.py and its main accompanying scripts are now compatible with numpy > 1.10

v 2.2.2 (June 2015)
	Fixed the hairpin example (see https://sourceforge.net/p/oxdna/discussion/general/thread/92fbef91/?limit=25#3c9b)

v 2.2.1 (May 2015)
	This release fixes a serious bug that could affect the calculation of the number of cells along 
	the box. In some cases this bug could affect the simulation outcome, as not all interacting
	pairs would be seen as such. All CPU backends (MD, MC, VMMC) were affected by this bug. 

v 2.2 (April 2015)
	This release includes the finalised code implementing the oxDNA2 model. In addition there are
	numerous bug fixes, more helpful error messages and other messages to the user, fixes to the 
	examples and various new features.
	- Added support for the oxDNA2 model. See the oxDNA wiki for more information. Use it by setting 
	interaction_type = DNA2 in the input file. The salt concentration must also be specified.
	- Added more observables.
	- Added more external forces.
	- Added GPU support for the salt-dependent RNA model.
	- Updated the syntax for the CPU order parameter parser (the old syntax still works). Non-
	consecutive numbers and letters can now be used to label particle pairs, and pairs can be added
	as lists. See commit message for revision 6431.
	- The Langevin thermostat may now be used on GPUs.
	- Reworked the way the oxDNA code handles plugins. It is now possible to use custom names for 
	the functions that act as entry points for the shared libraries. See the documentation in the 
	PluginManager class.
	- Various improvements to the python utility scripts.
	
v 2.1 (June 2014)
	This is mostly a bug-fixing release. We have fixed a few issues with different compilers
	and platforms and a few severe bugs that could result in segmentation faults.
	- Added support for interaction plugins. Now you can write separate classes to manage custom 
	interactions and load them in oxDNA as plugins. The mechanism is very similar to the one that
	manages observable plugins. See PluginManagement/PluginManager.h for additional documentation.
	- Added a new, improved and safer input parser. User-wise, the only difference with respect to
	the old parser is that it is now possible to put more than a single key-value pair on the same
	line by separating them with semicolons (e.g. key1 = value1; key2 = value2) 
	- Added salt-dependent DNA and RNA interactions. Note that these are still under development
	and then we advise not to use them as they are still subject to changes and possibly unstable.
	- A SRD (stochastic rotational dynamics) thermostat has been added. It works on both CPUs and
	GPUs. It seems working but we did not have thoroughly tested it. Use it at your own risk.
	- Added many observables (in the Observables folder).
	- Plenty of bugfixes, see commit messages for more information.

v 2.0 (March 2014)
	First release on sourceforge.
